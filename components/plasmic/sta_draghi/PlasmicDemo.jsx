// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uGTKGHAJVMXm8ZgFsPiEnc
// Component: XjTg1AH6yF
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_sta_draghi.module.css"; // plasmic-import: uGTKGHAJVMXm8ZgFsPiEnc/projectcss
import sty from "./PlasmicDemo.module.css"; // plasmic-import: XjTg1AH6yF/css

export const PlasmicDemo__VariantProps = new Array();

export const PlasmicDemo__ArgProps = new Array("children", "slot", "slot2");

export const defaultDemo__Args = {};

function PlasmicDemo__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDemo__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__yyQQf)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fipnx
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <h6
                  className={classNames(
                    projectcss.all,
                    projectcss.h6,
                    projectcss.__wab_text,
                    sty.h6___0Yho
                  )}
                >
                  {"Enter some Heading"}
                </h6>
                <React.Fragment>{""}</React.Fragment>
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__e6Gwh
                  )}
                >
                  {"Enter some Title"}
                </h5>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          ),

          value: args.slot
        })}
      </div>

      {p.renderPlasmicSlot({
        defaultContents: (
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__wlSKn)}
            displayHeight={"120px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"223px"}
            loading={"lazy"}
          />
        ),

        value: args.slot2
      })}

      <div className={classNames(projectcss.all, sty.freeBox__w5Wz7)}>
        {p.renderPlasmicSlot({
          defaultContents:
            "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. ",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDemo__ArgProps,
      internalVariantPropNames: PlasmicDemo__VariantProps
    });

    return PlasmicDemo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDemo";
  } else {
    func.displayName = `PlasmicDemo.${nodeName}`;
  }
  return func;
}

export const PlasmicDemo = Object.assign(
  // Top-level PlasmicDemo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicDemo
    internalVariantProps: PlasmicDemo__VariantProps,
    internalArgProps: PlasmicDemo__ArgProps
  }
);

export default PlasmicDemo;
/* prettier-ignore-end */
