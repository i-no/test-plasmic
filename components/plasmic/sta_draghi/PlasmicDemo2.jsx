// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uGTKGHAJVMXm8ZgFsPiEnc
// Component: ExWEgqqwZC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_sta_draghi.module.css"; // plasmic-import: uGTKGHAJVMXm8ZgFsPiEnc/projectcss
import sty from "./PlasmicDemo2.module.css"; // plasmic-import: ExWEgqqwZC/css

export const PlasmicDemo2__VariantProps = new Array();

export const PlasmicDemo2__ArgProps = new Array();

export const defaultDemo2__Args = {};

function PlasmicDemo2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDemo2__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__mO79N
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          <h5
            data-plasmic-name={"h5"}
            data-plasmic-override={overrides.h5}
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5
            )}
          >
            {"This is the headline"}
          </h5>
          <React.Fragment>{""}</React.Fragment>
          <h6
            data-plasmic-name={"h6"}
            data-plasmic-override={overrides.h6}
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6
            )}
          >
            {"This it the title"}
          </h6>
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>

      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"100px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"161px"}
        loading={"lazy"}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__kEvJx
        )}
      >
        {
          "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, "
        }
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "h5", "h6", "img"],
  h5: ["h5"],
  h6: ["h6"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDemo2__ArgProps,
      internalVariantPropNames: PlasmicDemo2__VariantProps
    });

    return PlasmicDemo2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDemo2";
  } else {
    func.displayName = `PlasmicDemo2.${nodeName}`;
  }
  return func;
}

export const PlasmicDemo2 = Object.assign(
  // Top-level PlasmicDemo2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h5: makeNodeComponent("h5"),
    h6: makeNodeComponent("h6"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicDemo2
    internalVariantProps: PlasmicDemo2__VariantProps,
    internalArgProps: PlasmicDemo2__ArgProps
  }
);

export default PlasmicDemo2;
/* prettier-ignore-end */
