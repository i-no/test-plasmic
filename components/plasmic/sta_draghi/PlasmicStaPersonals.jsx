// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uGTKGHAJVMXm8ZgFsPiEnc
// Component: OWFGQTuz6D
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_sta_draghi.module.css"; // plasmic-import: uGTKGHAJVMXm8ZgFsPiEnc/projectcss
import sty from "./PlasmicStaPersonals.module.css"; // plasmic-import: OWFGQTuz6D/css

export const PlasmicStaPersonals__VariantProps = new Array();

export const PlasmicStaPersonals__ArgProps = new Array("children", "slot");

export const defaultStaPersonals__Args = {};

function PlasmicStaPersonals__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultStaPersonals__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__rLeli)}>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            <React.Fragment>{""}</React.Fragment>
            <h6
              data-plasmic-name={"h6"}
              data-plasmic-override={overrides.h6}
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6
              )}
            >
              {"Ut enim ad minima veniam"}
            </h6>
            <React.Fragment>{""}</React.Fragment>
            <h5
              data-plasmic-name={"h5"}
              data-plasmic-override={overrides.h5}
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5
              )}
            >
              {"Nostrum exercitationem  "}
            </h5>
            <React.Fragment>{""}</React.Fragment>
          </React.Fragment>
        </div>
      </div>

      {p.renderPlasmicSlot({
        defaultContents: (
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__deYAv)}
            displayHeight={"100px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
          />
        ),

        value: args.children
      })}

      <div className={classNames(projectcss.all, sty.freeBox__ov0F)}>
        {p.renderPlasmicSlot({
          defaultContents:
            "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam volupta",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "h6", "h5"],
  text: ["text", "h6", "h5"],
  h6: ["h6"],
  h5: ["h5"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStaPersonals__ArgProps,
      internalVariantPropNames: PlasmicStaPersonals__VariantProps
    });

    return PlasmicStaPersonals__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStaPersonals";
  } else {
    func.displayName = `PlasmicStaPersonals.${nodeName}`;
  }
  return func;
}

export const PlasmicStaPersonals = Object.assign(
  // Top-level PlasmicStaPersonals renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    h6: makeNodeComponent("h6"),
    h5: makeNodeComponent("h5"),
    // Metadata about props expected for PlasmicStaPersonals
    internalVariantProps: PlasmicStaPersonals__VariantProps,
    internalArgProps: PlasmicStaPersonals__ArgProps
  }
);

export default PlasmicStaPersonals;
/* prettier-ignore-end */
