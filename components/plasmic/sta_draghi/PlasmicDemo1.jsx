// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uGTKGHAJVMXm8ZgFsPiEnc
// Component: seR7cldA3n
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import StaImageStory from "../../StaImageStory"; // plasmic-import: xiRghhzFUA/component
import Demo2 from "../../Demo2"; // plasmic-import: ExWEgqqwZC/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_sta_draghi.module.css"; // plasmic-import: uGTKGHAJVMXm8ZgFsPiEnc/projectcss
import sty from "./PlasmicDemo1.module.css"; // plasmic-import: seR7cldA3n/css

export const PlasmicDemo1__VariantProps = new Array();

export const PlasmicDemo1__ArgProps = new Array();

export const defaultDemo1__Args = {};

function PlasmicDemo1__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDemo1__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <StaImageStory
              data-plasmic-name={"staImageStory"}
              data-plasmic-override={overrides.staImageStory}
              className={classNames("__wab_instance", sty.staImageStory)}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <Demo2
                className={classNames("__wab_instance", sty.demo2___6Ij3M)}
              />

              <Demo2
                className={classNames("__wab_instance", sty.demo2__gB01C)}
              />

              <Demo2
                className={classNames("__wab_instance", sty.demo2___0Xv1N)}
              />
            </p.Stack>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "staImageStory", "freeBox"],
  staImageStory: ["staImageStory"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDemo1__ArgProps,
      internalVariantPropNames: PlasmicDemo1__VariantProps
    });

    return PlasmicDemo1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDemo1";
  } else {
    func.displayName = `PlasmicDemo1.${nodeName}`;
  }
  return func;
}

export const PlasmicDemo1 = Object.assign(
  // Top-level PlasmicDemo1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    staImageStory: makeNodeComponent("staImageStory"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicDemo1
    internalVariantProps: PlasmicDemo1__VariantProps,
    internalArgProps: PlasmicDemo1__ArgProps
  }
);

export default PlasmicDemo1;
/* prettier-ignore-end */
